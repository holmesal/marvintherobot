// Generated by CoffeeScript 1.6.2
(function() {
  var Solution, carryingCapacity, compare, displayGrid, fitnessIterations, initialize, moveLimit, numIterations, rando, randomGrid, sideLength;

  carryingCapacity = 200;

  numIterations = 1;

  fitnessIterations = 100;

  sideLength = 10;

  moveLimit = 200;

  rando = function(min, max) {
    max += 1;
    return Math.floor(Math.random() * (max - min) + min);
  };

  displayGrid = function(grid) {
    var display, x, y, _i, _j, _ref, _ref1;

    display = [];
    for (x = _i = 0, _ref = grid.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      display[x] = [];
      for (y = _j = 0, _ref1 = grid.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        display[x][y] = grid[y][x];
      }
    }
    return console.log(display);
  };

  Solution = (function() {
    function Solution() {
      this.fitnessvals = [];
      this.fitness = 0;
      this.genome = [];
      this.simvals = {
        x: 0,
        y: 0,
        move: 0
      };
    }

    Solution.prototype.randomGenome = function() {
      var x;

      return this.genome = (function() {
        var _i, _results;

        _results = [];
        for (x = _i = 0; _i <= 242; x = ++_i) {
          _results.push(rando(0, 6));
        }
        return _results;
      })();
    };

    Solution.prototype.findFitness = function() {
      var fitval, sum, x, _i, _j, _len, _ref, _ref1;

      for (x = _i = 0, _ref = fitnessIterations - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        this.fitnessvals[x] = this.runSim();
      }
      sum = 0;
      _ref1 = this.fitnessvals;
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        fitval = _ref1[_j];
        sum += fitval;
      }
      return this.fitness = sum / this.fitnessvals.length;
    };

    Solution.prototype.runSim = function() {
      var choice, grid, index, situation;

      grid = randomGrid();
      this.simvals = {
        x: 0,
        y: 0,
        move: 0,
        grid: grid,
        points: 0
      };
      while (this.simvals.move < moveLimit) {
        situation = this.getSituation();
        index = parseInt(situation, '3');
        choice = this.genome[index];
        switch (choice) {
          case 0:
            this.moveNorth();
            break;
          case 1:
            this.moveSouth();
            break;
          case 2:
            this.moveEast();
            break;
          case 3:
            this.moveWest();
            break;
          case 5:
            this.pickUpCan();
            break;
          case 6:
            this.randomMove();
        }
        this.simvals.move += 1;
      }
      return this.simvals.points;
    };

    Solution.prototype.getSituation = function() {
      var current, east, north, south, west;

      if (this.simvals.y === 0) {
        north = '2';
      } else {
        north = String(this.simvals.grid[this.simvals.x][this.simvals.y - 1]);
      }
      if (this.simvals.y === sideLength - 1) {
        south = '2';
      } else {
        south = String(this.simvals.grid[this.simvals.x][this.simvals.y + 1]);
      }
      if (this.simvals.x === 0) {
        west = '2';
      } else {
        west = String(this.simvals.grid[this.simvals.x - 1][this.simvals.y]);
      }
      if (this.simvals.x === sideLength - 1) {
        east = '2';
      } else {
        east = String(this.simvals.grid[this.simvals.x + 1][this.simvals.y]);
      }
      current = String(this.simvals.grid[this.simvals.x][this.simvals.y]);
      return north + south + east + west + current;
    };

    Solution.prototype.moveNorth = function() {
      if (this.simvals.y === 0) {
        return this.simvals.points -= 5;
      } else {
        return this.simvals.y -= 1;
      }
    };

    Solution.prototype.moveSouth = function() {
      if (this.simvals.y === sideLength - 1) {
        return this.simvals.points -= 5;
      } else {
        return this.simvals.y += 1;
      }
    };

    Solution.prototype.moveEast = function() {
      if (this.simvals.x === sideLength - 1) {
        return this.simvals.points -= 5;
      } else {
        return this.simvals.x += 1;
      }
    };

    Solution.prototype.moveWest = function() {
      if (this.simvals.x === 0) {
        return this.simvals.points -= 5;
      } else {
        return this.simvals.x -= 1;
      }
    };

    Solution.prototype.pickUpCan = function() {
      if (this.simvals.grid[this.simvals.x][this.simvals.y] === 1) {
        this.simvals.points += 10;
        return this.simvals.grid[this.simvals.x][this.simvals.y] = 0;
      } else {
        return this.simvals.points -= 1;
      }
    };

    Solution.prototype.randomMove = function() {
      var randint;

      randint = rando(0, 3);
      switch (randint) {
        case 0:
          return this.moveNorth();
        case 1:
          return this.moveSouth();
        case 2:
          return this.moveEast();
        case 3:
          return this.moveWest();
      }
    };

    return Solution;

  })();

  randomGrid = function() {
    var grid, x, y, _i, _ref, _results;

    grid = [];
    _results = [];
    for (x = _i = 0, _ref = sideLength - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      grid[x] = [];
      _results.push((function() {
        var _j, _ref1, _results1;

        _results1 = [];
        for (y = _j = 0, _ref1 = sideLength - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          _results1.push(grid[x][y] = rando(0, 1));
        }
        return _results1;
      })());
    }
    return _results;
  };

  compare = function(a, b) {
    if (a.fitness > b.fitness) {
      return -1;
    }
    if (a.fitness < b.fitness) {
      return 1;
    }
    return 0;
  };

  initialize = function() {
    var i, s, solutions, total, x, _i, _j, _k, _l, _len, _len1, _len2, _ref, _results;

    solutions = [];
    for (x = _i = 0, _ref = carryingCapacity - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      s = new Solution;
      s.randomGenome();
      solutions[x] = s;
    }
    i = 0;
    while (i < numIterations) {
      console.log("%%%%%%%%%%%%%%% " + i + " %%%%%%%%%%%%%%%");
      for (_j = 0, _len = solutions.length; _j < _len; _j++) {
        s = solutions[_j];
        s.findFitness();
      }
      i += 1;
    }
    solutions.sort(compare);
    total = 0;
    for (_k = 0, _len1 = solutions.length; _k < _len1; _k++) {
      s = solutions[_k];
      s.dfitness = s.fitness - solutions[solutions.length - 1].fitness;
      total += s.dfitness;
    }
    console.log(total);
    _results = [];
    for (_l = 0, _len2 = solutions.length; _l < _len2; _l++) {
      s = solutions[_l];
      s.fracfitness = s.dfitness / total;
      _results.push(console.log(s.fracfitness));
    }
    return _results;
  };

  initialize();

}).call(this);
